{"version":3,"sources":["images/cases.jpg","images/Coronavirus.png","images/green.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","allData","setAllData","allCountries","setAllCountries","search","setSearch","width","height","latitude","longitude","zoom","viewport","setViewport","useEffect","axios","all","get","then","res","data","catch","err","console","log","updated","Date","parseInt","toString","RegExp","quote","replace","regex","searchItems","filter","item","country","match","mapTag","map","tag","countryInfo","lat","long","offsetLeft","offsetTop","src","flag","alt","style","borderRadius","className","cases","countries","Card","Img","variant","Body","Title","Text","todayCases","deaths","todayDeaths","recovered","active","critical","Carousel","Item","red","Caption","green","tests","blue","Container","CardDeck","marginTop","bg","text","Footer","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","CardColumns","mapStyle","mapboxApiAccessToken","onViewportChange","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.616c46bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cases.0495f5e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Coronavirus.3618392a.png\";","module.exports = __webpack_public_path__ + \"static/media/green.928caae4.jpg\";","import React, { useState, useEffect } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\nimport axios from \"axios\";\nimport blue from \"./images/cases.jpg\";\nimport red from \"./images/Coronavirus.png\";\nimport green from \"./images/green.jpg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [allData, setAllData] = useState([]);\n  const [allCountries, setAllCountries] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [viewport, setViewport] = useState({\n    width: \"100%\",\n    height: \"90vh\",\n    latitude: 30.7577,\n    longitude: -20.4376,\n    zoom: 1,\n  });\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/all\"),\n        axios.get(\"https://corona.lmao.ninja/countries\"),\n      ])\n      .then((res) => {\n        setAllData(res[0].data);\n        setAllCountries(res[1].data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n  const date = new Date(parseInt(allData.updated));\n  const updated = date.toString();\n  console.log(allData);\n  RegExp.quote = function (search) {\n    return search.replace(/([.?*+^$[\\]\\\\(){}|-])/gi, \"\\\\$1\");\n  };\n  const regex = new RegExp(RegExp.quote(search), \"gi\");\n  var searchItems = allCountries.filter(function (item) {\n    if (allCountries) {\n      if (search) {\n\n        return item.country.match(regex);\n      } else {\n        // return allCountries;\n      }\n    }\n  });\n  const mapTag = allCountries.map((tag) => {\n    return (\n      <>\n        <Marker\n          latitude={tag.countryInfo.lat}\n          longitude={tag.countryInfo.long}\n          offsetLeft={-20}\n          offsetTop={-10}\n        >\n          <img\n            src={tag.countryInfo.flag}\n            alt=\"img\"\n            style={{ height: \"20px\", width: \"20px\" ,borderRadius: \"50%\"}}\n          />\n          <p className=\"case\">{tag.cases}</p>\n        </Marker>\n      </>\n    );\n  });\n  const countries = searchItems.map((data) => {\n    return (\n      <>\n        <Card>\n          <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n          <Card.Body>\n            <Card.Title>{data.country}</Card.Title>\n            <Card.Text>Cases: {data.cases}</Card.Text>\n            <Card.Text>Today Cases: {data.todayCases}</Card.Text>\n            <Card.Text>Deaths: {data.deaths}</Card.Text>\n            <Card.Text>Today Deaths: {data.todayDeaths}</Card.Text>\n            <Card.Text>Recovered: {data.recovered}</Card.Text>\n            <Card.Text>Active: {data.active}</Card.Text>\n            <Card.Text>Critical: {data.critical}</Card.Text>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  });\n  return (\n    <div>\n      <Carousel>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={red}\n      alt=\"First slide\"\n      style={{height:\"50vh\"}}\n    />\n    <Carousel.Caption>\n      <h3>Today Deaths</h3>\n      <h6 >{allData.todayDeaths}</h6>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={green}\n      alt=\"Third slide\"\n      style={{height:\"50vh\"}}\n    />\n\n    <Carousel.Caption>\n      <h3>Tests</h3>\n      <h6 >{allData.tests}</h6>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={blue}\n      alt=\"Third slide\"\n      style={{height:\"50vh\"}}\n    />\n\n    <Carousel.Caption>\n      <h3>Today Cases</h3>\n      <h6 >{allData.todayCases} </h6>\n    </Carousel.Caption>\n  </Carousel.Item>\n</Carousel>\n      <Container>\n        <CardDeck style={{ marginTop: \"30px\" }}>\n          <Card bg=\"danger\" text=\"dark\" className=\"text-center\">\n            <Card.Body>\n              <Card.Title>Death</Card.Title>\n              <Card.Text>{allData.deaths}</Card.Text>\n            </Card.Body>\n            <Card.Footer>Last updated: {updated} </Card.Footer>\n          </Card>\n          <Card bg=\"warning\" text=\"dark\" className=\"text-center\">\n            <Card.Body>\n              <Card.Title>Cases</Card.Title>\n              <Card.Text>{allData.cases}</Card.Text>\n            </Card.Body>\n            <Card.Footer>Last updated: {updated} </Card.Footer>\n          </Card>\n          <Card bg=\"success\" text=\"dark\" className=\"text-center\">\n            <Card.Body>\n              <Card.Title>Recovered</Card.Title>\n              <Card.Text>{allData.recovered}</Card.Text>\n            </Card.Body>\n            <Card.Footer>Last updated: {updated} </Card.Footer>\n          </Card>\n        </CardDeck>\n        <Form>\n          <Form.Group controlId=\"formGroupEmail\" style={{ marginTop: \"30px\" }}>\n            <Form.Label>Country Search</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Country Name\"\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </Form.Group>\n        </Form>\n        <CardColumns style={{ marginTop: \"30px\" }}>{countries}</CardColumns>\n        <div style={{ height: \"100vh\", width: \"100%\" }}>\n          <ReactMapGL\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            mapboxApiAccessToken=\"pk.eyJ1IjoibmF6ZWgyMDAiLCJhIjoiY2s4dXpzY2h0MDUxODNobnpub3hrZW01eSJ9.CjIwcSToozJAr6Zk1gbA7A\"\n            {...viewport}\n            onViewportChange={setViewport}\n          >\n            {mapTag}\n          </ReactMapGL>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}